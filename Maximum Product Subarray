Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.





def maxProductSubarray(arr):
    n = len(arr)

    if n == 0:
        return 0

    max_ending_here = arr[0]
    min_ending_here = arr[0]
    max_so_far = arr[0]

    for i in range(1, n):
        if arr[i] < 0:
            max_ending_here, min_ending_here = min_ending_here, max_ending_here

        max_ending_here = max(arr[i], max_ending_here * arr[i])
        min_ending_here = min(arr[i], min_ending_here * arr[i])

        max_so_far = max(max_so_far, max_ending_here)

    return max_so_far

# Example usage:
if __name__ == "__main__":
    arr = [6, -3, -10, 0, 2]
    result = maxProductSubarray(arr)
    print(result)
